<?php
/**
 * @file
 * Functions for the Social Media Links module.
 */

include_once 'social_media_links.iconsets.inc';

/**
 * Implements hook_init().
 */
function social_media_links_init() {
  drupal_add_css(drupal_get_path('module', 'social_media_links') . '/social_media_links.css');
}


/**
 * Implements hook_block_info().
 */
function social_media_links_block_info() {
  $blocks['social-media-links'] = array(
    'info' => t('Social Media Links'),
    // We cache per role, so that the edit/configure links display only if the
    // user has access.
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );

  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function social_media_links_block_configure($delta = '') {
  if ($delta === 'social-media-links') {
    $form = array();

    // Platforms
    $form['platforms'] = array(
      '#type' => 'fieldset',
      '#title' => t('Platforms'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#tree' => TRUE,
    );

    $platform_values = variable_get('social_media_links_platforms', array());
    foreach (social_media_links_platforms() as $key => $value) {
      $form['platforms'][$key] = array(
        '#type' => 'textfield',
        '#title' => $value['title'],
        '#size' => 40,
        '#field_prefix' => $value['base_url'],
        '#default_value' => isset($platform_values[$key]) ? $platform_values[$key] : '',
      );
    }

    // Appearance
    $form['appearance'] = array(
      '#type' => 'fieldset',
      '#title' => t('Appearance'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#tree' => TRUE,
    );
    $appearance_values = variable_get('social_media_links_appearance', array());
    $form['appearance']['orientation'] = array(
      '#type' => 'select',
      '#title' => t('Orientation'),
      '#default_value' => isset($appearance_values['orientation']) ? $appearance_values['orientation'] : 'h',
      '#options' => array(
        'v' => t('vertical'),
        'h' => t('horizontal'),
      ),
    );

    // Link Attributes
    $form['link_attributes'] = array(
      '#type' => 'fieldset',
      '#title' => t('Link attributes'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#tree' => TRUE,
    );
    $link_values = variable_get('social_media_links_link_attributes', array());
    $form['link_attributes']['target'] = array(
      '#type' => 'select',
      '#title' => t('Default target'),
      '#default_value' => isset($link_values['target']) ? $link_values['target'] : '<none>',
      '#options' => array(
        '<none>' => t('Remove target attribute'),
        '_blank' => t('Open in a new browser window or tab (_blank)'),
        '_self' => t('Open in the current window (_self)'),
        '_parent' => t('Open in the frame that is superior to the frame the link is in (_parent)'),
        '_top' => t('Cancel all frames and open in full browser window (_top)'),
      ),
    );
    $form['link_attributes']['rel'] = array(
      '#type' => 'select',
      '#title' => t('Default rel'),
      '#default_value' => isset($link_values['rel']) ? $link_values['rel'] : '<none>',
      '#options' => array(
        '<none>' => t('Remove rel attribute'),
        'nofollow' => t('Set nofollow'),
      ),
    );

    // Icon Sets
    $form['icons'] = array(
      '#type' => 'fieldset',
      '#title' => t('Icon Sets'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
    );

    $options = social_media_links_iconsets_options();
    $form['icons']['icon_style'] = array(
      '#type' => 'select',
      '#title' => t('Icon Style'),
      '#default_value' => variable_get('social_media_links_icon_style', ''),
      '#options' => $options,
    );

    // Generate the icon set table.
    $header = array(
      array(
        'data' => t('Name'),
        'style' => 'width: 150px;',
      ),
      t('Sizes'),
      t('Icon examples and download instructions'),
    );

    $rows = array();
    $icons = social_media_links_iconsets();
    $platforms = social_media_links_platforms();
    foreach ($icons as $iconset_name => $iconset) {
      if (isset($iconset['download url'])) {
        $name = '<strong>' . l($iconset['name'], $iconset['download url'], array('attributes' => array('target' => '_blank'))) . '</strong>';
      }
      else {
        $name = '<strong>' . $iconset['name'] . '</strong>';
      }

      if (isset($iconset['publisher'])) {
        $name .= '<br />' . t('by') . ' ';
        if (isset($iconset['publisher url'])) {
          $name .= l($iconset['publisher'], $iconset['publisher url'], array('attributes' => array('target' => '_blank')));
        }
        else {
          $name .= $iconset['publisher'];
        }
      }

      $row = array(
        $name,
        implode('<br />', $iconset['styles']),
      );

      if (social_media_links_iconset_installed($iconset_name)) {
        $row[] = _social_media_links_generate_example_table($platforms, $iconset);
      }
      else {
        $str = t('<strong>Not installed.</strong><br />To install: !download and install it into <code>%dir</code>.',
          array(
            '!download' => l(t('Download'), $iconset['download url'], array('attributes' => array('target' => '_blank'))),
            '%dir' => 'sites/all/libraries/' . $iconset_name . '/',
          )
        );
        if (isset($iconset['additional instructions'])) {
          $str .= ' ' . $iconset['additional instructions'];
        }
      }

      $rows[] = $row;
      $vars = array(
        'header' => $header,
        'rows' => $rows,
        'attributes' => array(
          'id' => 'social-media-links-iconsets',
        ),
      );

      $form['icons']['installed'] = array(
        '#markup' => theme('table', $vars),
      );
    }
  }

  return $form;
}

/**
 * Implements hook_block_save().
 */
function social_media_links_block_save($delta = '', $edit = array()) {
  if ($delta === 'social-media-links') {
    variable_set('social_media_links_platforms', $edit['platforms']);
    variable_set('social_media_links_appearance', $edit['appearance']);
    variable_set('social_media_links_link_attributes', $edit['link_attributes']);
    variable_set('social_media_links_icon_style', $edit['icon_style']);
  }
}

/**
 * Implements hook_block_view().
 */
function social_media_links_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'social-media-links':
      $block['subject'] = t('Follow Us');
      $block['content'] = social_media_links_block_view_content();
      break;
  }

  return $block;
}

/**
 * Custom function to assemble renderable array for block content.
 *
 * @return array
 *   Returns a renderable array with the block content.
 */
function social_media_links_block_view_content() {
  $block = array();

  $platform_values = variable_get('social_media_links_platforms');

  if (count($platform_values) < 1) {
    return $block;
  }

  $appearance_values = variable_get('social_media_links_appearance');
  $link_values = variable_get('social_media_links_link_attributes');
  $icon_style = explode(':', variable_get('social_media_links_icon_style'));

  $platform_infos = social_media_links_platforms();
  $platforms = array();
  foreach ($platform_values as $platform_name => $platform_value) {
    if (!empty($platform_value)) {
      $platform_url = $platform_infos[$platform_name]['base_url'] . $platform_value;

      // Call the url callback of the platform.
      if (isset($platform_infos[$platform_name]['url callback'])) {
        $platform_url_changed = call_user_func($platform_infos[$platform_name]['url callback'], $platform_infos[$platform_name]['base_url'], $platform_value);
        if ($platform_url_changed) {
          $platform_url = $platform_url_changed;
        }
      }

      // Generate the link render array.
      $platforms[$platform_name] = array(
        'href' => $platform_url,
        'title' => theme('image', array(
          'path' => social_media_links_icon($icon_style[0], $platform_name, $icon_style[1]),
        )),
        'attributes' => array(
          'title' => $platform_infos[$platform_name]['title'],
        ),
        'html' => TRUE,
      );
      if (!isset($platform_infos[$platform_name]['link attributes']) || $platform_infos[$platform_name]['link attributes']) {
        if ($link_values['target'] != '<none>') {
          $platforms[$platform_name]['attributes']['target'] = $link_values['target'];
        }
        if ($link_values['rel'] != '<none>') {
          $platforms[$platform_name]['attributes']['rel'] = $link_values['rel'];
        }
      }
    }
  }

  // Block output in HTML with the div wrapper.
  $block = array(
    'platforms' => array(
      '#theme' => 'links',
      '#links' => $platforms,
      '#attributes' => array(
        'class' => array('links', 'social-media-links'),
      ),
    ),
  );

  if ($appearance_values['orientation'] == 'h') {
    $block['platforms']['#attributes']['class'][] = 'inline horizontal';
  }
  else {
    $block['platforms']['#attributes']['class'][] = 'vertical';
  }

  return $block;
}

/**
 * Get the available platforms.
 *
 * @return array
 *   Returns a list of platforms.
 */
function social_media_links_platforms() {
  $platforms = &drupal_static(__FUNCTION__);

  // Grab from cache or build the array.
  if (isset($platforms)) {
    return $platforms;
  }
  $platforms = array();
  $platforms = module_invoke_all('social_media_links_platform_info');

  drupal_alter('social_media_links_platform_info_alter', $platforms);

  return $platforms;
}

/**
 * Get all registered icon sets.
 *
 * @return array
 *   Return a list of all registered platforms.
 */
function social_media_links_iconsets() {
  $sets = &drupal_static(__FUNCTION__);

  // Grab from cache or build the array.
  if (isset($sets)) {
    return $sets;
  }
  $sets = array();
  $sets = module_invoke_all('social_media_links_iconset_info');

  drupal_alter('social_media_links_iconset_info_alter', $sets);

  return $sets;
}

/**
 * Get informations about a specific icon set.
 *
 * @param string $iconset
 *   Name of the icon set.
 *
 * @return array
 *   Informations about the icon set.
 */
function social_media_links_iconset($iconset) {
  $sets = social_media_links_iconsets();
  return isset($sets[$iconset]) ? $sets[$iconset] : FALSE;
}

/**
 * Get the path of a platform icon.
 *
 * @param string $iconset
 *   Name of the icon set.
 * @param string $platform
 *   Name of the platform.
 * @param string $style
 *   Icon size.
 *
 * @return string
 *   Path to the icon image.
 */
function social_media_links_icon($iconset, $platform, $style) {
  $iconset = social_media_links_iconset($iconset);
  return call_user_func($iconset['path callback'], $platform, $style);
}

/**
 * Check if a specific icon set is installed.
 *
 * @param string $iconset
 *   Name of the icon set.
 *
 * @return bool
 *   TRUE if the icon set is installed, otherwise FALSE.
 */
function social_media_links_iconset_installed($iconset) {
  $iconsets = social_media_links_iconsets();
  return file_exists(call_user_func($iconsets[$iconset]['path callback']));
}

/**
 * Get the list options for the icon set style select.
 *
 * @return array
 *   Array with the select options.
 */
function social_media_links_iconsets_options() {
  $iconsets = social_media_links_iconsets();
  $options = array();

  foreach ($iconsets as $iconset_name => $iconset) {
    if (social_media_links_iconset_installed($iconset_name)) {
      foreach ($iconset['styles'] as $sid => $style) {
        $options[$iconset['name']][$iconset_name . ':' . $sid] = $style;
      }
    }
  }

  return $options;
}

/**
 * Register the default platforms.
 *
 * @return array
 *   List with the default supported platforms.
 */
function social_media_links_social_media_links_platform_info() {
  $platforms['facebook'] = array(
    'title' => t('Facebook'),
    'base_url' => 'http://www.facebook.com/',
  );

  $platforms['twitter'] = array(
    'title' => t('Twitter'),
    'base_url' => 'http://www.twitter.com/',
  );

  $platforms['googleplus'] = array(
    'title' => t('Google+'),
    'base_url' => 'https://plus.google.com/',
  );

  $platforms['linkedin'] = array(
    'title' => t('LinkedIn'),
    'base_url' => 'http://www.linkedin.com/profile/view?id=',
  );

  $platforms['pinterest'] = array(
    'title' => t('Pinterest'),
    'base_url' => 'http://www.pinterest.com',
  );

  $platforms['vimeo'] = array(
    'title' => t('Vimeo'),
    'base_url' => 'http://www.vimeo.com/',
  );

  $platforms['youtube'] = array(
    'title' => t('YouTube'),
    'base_url' => 'http://www.youtube.com/user/',
  );

  $platforms['rss'] = array(
    'title' => t('RSS'),
    'base_url' => url(NULL, array('absolute' => TRUE)) . (variable_get('clean_url', 0) ? '' : '?q='),
  );

  $platforms['contact'] = array(
    'title' => t('Contact'),
    'base_url' => url(NULL, array('absolute' => TRUE)) . (variable_get('clean_url', 0) ? '' : '?q='),
    'link attributes' => FALSE,
  );

  $platforms['email'] = array(
    'title' => t('E-Mail'),
    'base_url' => '',
    'url callback' => 'social_media_links_email_url',
    'link attributes' => FALSE,
  );

  // $platforms['github'] = array(
  //   'title' => t('Github'),
  //   'base_url' => '',
  // );

  // $platforms['bitbucket'] = array(
  //   'title' => t('Bitbucket'),
  //   'base_url' => '',
  // );

  return $platforms;
}

/**
 * Callback function to generate the correct url for e-mail links.
 */
function social_media_links_email_url($base_url, $platform_value) {
  if (valid_email_address($platform_value)) {
    return 'mailto:' . $platform_value;
  }
}

/**
 * Helper function to generate the icon set example table.
 *
 * @param array $platforms
 *   Keyed array with all available platforms.
 * @param array $iconset
 *   Array with the information about the icon set.
 *
 * @return string
 *   The generated table markup.
 */
function _social_media_links_generate_example_table($platforms, $iconset) {
  if (!is_array($platforms) && count($platforms) == 0) {
    return '';
  }

  $groups = array_chunk($platforms, 10, TRUE);
  $output = '';

  foreach ($groups as $group) {
    $header = array();
    $row = array();

    foreach ($group as $platform_name => $platform) {
      $header[] = array(
        'data' => $platform['title'],
        'style' => 'text-align: center; ',
      );

      $vars = array('path' => call_user_func($iconset['path callback'], $platform_name));

      if (file_exists($vars['path'])) {
        $row[] = array(
          'data' => theme('image', $vars) . ' ',
          'style' => 'text-align: center;'
        );
      }
      else {
        $row[] = array(
          'data' => '–',
          'style' => 'text-align: center;',
        );
      }
    }

    $vars = array(
      'header' => $header,
      'rows' => array('data' => $row),
    );
    $output .= theme('table', $vars);
    $output .= '<br />';
  }

  return $output;
}
